name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  validate:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag format
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG="${{ github.ref_name }}"
          fi
          
          if [[ ! "$TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+)?$ ]]; then
            echo "Invalid tag format: $TAG"
            echo "Expected format: v1.2.3 or v1.2.3-alpha"
            exit 1
          fi
          
          VERSION=${TAG#v}
          IS_PRERELEASE="false"
          if [[ "$TAG" =~ -[a-zA-Z0-9]+ ]]; then
            IS_PRERELEASE="true"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Releasing version: $VERSION (prerelease: $IS_PRERELEASE)"

  test:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ubuntu-latest-go-1.24-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ubuntu-latest-go-1.24-
            ubuntu-latest-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run comprehensive tests
        run: go test -race -v ./...

      - name: Run benchmarks
        run: go test -bench=. -benchmem -run=^$ ./internal/processor

      - name: Build and test completions
        run: |
          go build -v ./cmd
          ./mdnotes completion bash > /tmp/completion.bash
          ./mdnotes completion zsh > /tmp/completion.zsh
          ./mdnotes completion fish > /tmp/completion.fish
          ./mdnotes completion powershell > /tmp/completion.ps1
          
          # Test completion functionality
          ./mdnotes __complete frontmatter ensure --field "" | grep -q "title"
          ./mdnotes __complete completion "" | grep -q "bash"

  security:
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ubuntu-latest-go-1.24-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ubuntu-latest-go-1.24-
            ubuntu-latest-go-

      - name: Download dependencies
        run: go mod download

      - name: Run security scan
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: './...'

      - name: Run vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          govulncheck ./...

  build-verification:
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ubuntu-latest-go-1.24-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ubuntu-latest-go-1.24-
            ubuntu-latest-go-

      - name: Download dependencies
        run: go mod download

      - name: Build for ${{ matrix.goos }}/${{ matrix.goarch }}
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            go build -ldflags="-s -w" -v -o mdnotes.exe ./cmd
          else
            go build -ldflags="-s -w" -v -o mdnotes ./cmd
          fi

  goreleaser:
    runs-on: ubuntu-latest
    needs: [validate, test, security, build-verification]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ubuntu-latest-go-1.24-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ubuntu-latest-go-1.24-
            ubuntu-latest-go-

      - name: Download dependencies
        run: go mod download

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install signing tools
        run: |
          go install github.com/sigstore/cosign/v2/cmd/cosign@latest

      - name: Generate shell completions
        run: |
          go build -v ./cmd
          mkdir -p dist/completions
          ./mdnotes completion bash > dist/completions/mdnotes_completion.bash
          ./mdnotes completion zsh > dist/completions/mdnotes_completion.zsh
          ./mdnotes completion fish > dist/completions/mdnotes_completion.fish
          ./mdnotes completion powershell > dist/completions/mdnotes_completion.ps1

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FURY_TOKEN: ${{ secrets.FURY_TOKEN }}

      - name: Upload shell completions
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release.outputs.upload_url }}
          asset_path: ./dist/completions/mdnotes_completion.bash
          asset_name: mdnotes_completion.bash
          asset_content_type: text/plain

  post-release:
    runs-on: ubuntu-latest
    needs: [goreleaser]
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify release artifacts
        run: |
          # Get the latest release
          RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
            jq -r '.id')
          
          # List release assets
          curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | \
            jq -r '.[].name' > release_assets.txt
          
          echo "Release assets:"
          cat release_assets.txt
          
          # Verify expected assets exist
          for asset in "checksums.txt" "mdnotes_Linux_x86_64.tar.gz" "mdnotes_Darwin_x86_64.tar.gz"; do
            if ! grep -q "$asset" release_assets.txt; then
              echo "Missing expected asset: $asset"
              exit 1
            fi
          done
          
          echo "All expected assets verified!"

      - name: Test Docker images
        run: |
          # Test the released Docker image
          docker run --rm ghcr.io/${{ github.repository_owner }}/mdnotes:latest --version
          docker run --rm ghcr.io/${{ github.repository_owner }}/mdnotes:latest --help